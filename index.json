[
{
	"uri": "https://gabylaunay.github.io/Python-cookbook/image-analysis/",
	"title": "Image Analysis",
	"tags": [],
	"description": "Tutorial for drop shape detection and analysis.",
	"content": " You can get the python script detailled in this page here: script.py.\nAnd an archive containing the script and the data here: archive.tar.gz, archive.zip.\n Importing images Importing images is made easy by the scipy package:\nfrom scipy import misc image = misc.imread(\u0026#39;data/image.bmp\u0026#39;) /usr/lib/python3.6/site-packages/ipykernel_launcher.py:2: DeprecationWarning: `imread` is deprecated! `imread` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0. Use ``imageio.imread`` instead.  Images area stored as arrays of numbers. You can display them for verification using the matplotlib package:\nimport matplotlib.pyplot as plt plt.figure() plt.imshow(image) plt.colorbar() plt.show() Cropping As an edge detection at this point will certainly detect the syringe edges at the top, it may be a good idea to restrain the area of interest around the drop:\nimage = image[200:400, 200:550] plt.figure() plt.imshow(image) plt.show()  Edge detection OpenCV (Open Source Computer Vision Library) is a very efficient library that provide a python interface. We will use its edge detection functions to get the edge of our drop. More specifically, we will use the Canny edge detector.\nThis method necessitates to specify two threshold values. We will simply use the minimal and maximal pixel values here. Those thresholds can be tuned to enhance the edge detection depending on the situation.\nimport cv2 thres1 = image.min() thres2 = image.max() edges = cv2.Canny(image, thres1, thres2) # Display the obtained edges plt.figure() plt.imshow(edges) plt.show() As we can see here, the edge detection succesfully detect the drop edges, but also some structures near the sample surfaces. Lets improve the threshold values to get rid of those unwated bits.\nthres1 = image.min()*0.75 thres2 = image.max()*1.5 edges = cv2.Canny(image, thres1, thres2) # Display the obtained edges plt.figure() plt.imshow(edges) plt.show() We than need to remove the edges of the drop reflection on the sample. We can do this by removing all the edges present below the baseline.\nedges[180:] = 0 # Display the obtained edges plt.figure() plt.imshow(edges) plt.show() Fitting edges Drop edge is for the moment stored as an image, if we want to access its position, we have to find the pixel position in space. numpy can help us do that by detecting where the pixel values are not zero.\nimport numpy as np ys, xs = np.where(edges) ys = np.asarray(-ys, dtype=float) xs = np.asarray(xs, dtype=float) # Plot the edges plt.figure() plt.plot(xs, ys, marker=\u0026#39;o\u0026#39;, ls=\u0026#39;none\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) plt.show() For convenience, we may want to center the drop edge on the referential\nxs -= xs.mean() ys -= ys.min() # Plot the edges plt.figure() plt.plot(xs, ys, marker=\u0026#39;o\u0026#39;, ls=\u0026#39;none\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) plt.show() "
},
{
	"uri": "https://gabylaunay.github.io/Python-cookbook/import-data/",
	"title": "Importing Data",
	"tags": [],
	"description": "Cookbook on importing data into Python",
	"content": " You can get the python script detailled in this page here: script.py.\nAnd an archive containing the script and the data here: archive.tar.gz, archive.zip.\n Ascii files Tables of numbers Simplest way to import data aranged in table from an ascii file is to use numpy:\nimport numpy as np data = np.genfromtxt(\u0026#39;data/data.csv\u0026#39;) print(data) [[37.70587485 25.87930691 11.1807849 6.29982498] [ 8.56702615 6.42440682 26.43331203 4.75911353] [46.62942399 30.2224285 49.35137806 16.32100564] [38.99391383 31.54382599 14.88671628 9.92786169] [15.50027605 48.45142251 30.16164798 18.29314173] [ 6.6336436 4.23085519 33.69157162 39.33629762] [ 3.64350001 0.61175817 18.83570963 13.17930294] [ 2.48434325 33.77391739 1.89173126 27.08342268] [15.48219208 49.78432857 48.17905851 35.66727198] [22.16530832 32.91388506 38.37315601 32.00800632] [32.5199885 45.86655672 12.45190816 33.92922999] [49.21332445 43.04899737 41.55144366 42.84145576] [37.2348323 33.27424985 1.9561426 46.64086924]]  Exporting arrays of numbers is as simple\nnew_data = data*4.3 np.savetxt(\u0026#39;data/new_data.csv\u0026#39;, new_data) Mixed table of numbers and text The pandas package allows to deal with complex sets of data including text and numbers.\nimport pandas as pd data = pd.read_csv(\u0026#39;data/data_mixed.csv\u0026#39;) print(data)  yellow 125 [0.18848372 0.54320351 0.1604927 ] 0 blue 24 [0.33882547 0.87313498 0.46219675] 1 red 93 [0.30873892 0.21764292 0.38400272] 2 grey 23 [0.5043959 0.548625 0.60459919]  Complex data Data than are not organized in a table (like text, result measurements from an exotic machine) can be imported using the builtins python functions.\nwith open(\u0026#39;data/data_complex.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: data = f.readlines() for line in data: print(line) From wikipedia: Python is an interpreted high-level programming language for general-purpose programming. Created by Guido van Rossum and first released in 1991, Python has a design philosophy that emphasizes code readability, and a syntax that allows programmers to express concepts in fewer lines of code,[25][26] notably using significant whitespace. It provides constructs that enable clear programming on both small and large scales.[27]  Images The scipy package makes it particularly easy to import on work with images.\nfrom scipy import misc image = misc.imread(\u0026#39;data/image.bmp\u0026#39;) /usr/lib/python3.6/site-packages/ipykernel_launcher.py:2: DeprecationWarning: `imread` is deprecated! `imread` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0. Use ``imageio.imread`` instead.  Images can then be displayed it with matplotlib.\nimport matplotlib.pyplot as plt plt.figure() plt.imshow(image) plt.show() Images are stored as arrays of numbers, so pixel values are easily accesible\nprint(\u0026#34;Pixel values:\\n{}\u0026#34;.format(image)) print(\u0026#34;Value of the pixel at (10,10): {}\u0026#34;.format(image[10, 10])) Pixel values: [[180 186 191 ... 224 225 232] [192 180 179 ... 221 226 226] [184 186 185 ... 230 225 225] ... [ 30 30 30 ... 153 155 156] [ 29 28 28 ... 150 138 147] [ 26 26 28 ... 136 137 140]] Value of the pixel at (10,10): 189  "
},
{
	"uri": "https://gabylaunay.github.io/Python-cookbook/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gabylaunay.github.io/Python-cookbook/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gabylaunay.github.io/Python-cookbook/",
	"title": "Python CookBook",
	"tags": [],
	"description": "",
	"content": " Python Cookbook This website provides a collection of Python scripts, snippets and tutorials for scientific data analysis. The currently available ressources are listed below:\n Image Analysis Tutorial for drop shape detection and analysis.\n  Importing Data Cookbook on importing data into Python\n  "
},
{
	"uri": "https://gabylaunay.github.io/Python-cookbook/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]